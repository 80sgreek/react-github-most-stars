{"version":3,"sources":["domain/actions/actionTypes.ts","domain/reducers/RepositoryReducer.ts","Store.tsx","domain/actions/RepositoryActions.ts","containers/RepositoryHeading.tsx","components/RepositoryCard.tsx","containers/RepositoryList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["RepositoryActionTypes","initialState","items","searching","rootReducer","combineReducers","repositoriesState","state","arguments","length","undefined","action","type","GET_ALL","Object","objectSpread","repositories","searchString","createdSince","CLEAR_ALL","getMostStarredGithubRepoUrl","language","numberOfResults","concat","getAllRepositories","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","dispatch","cleanLanguage","response","wrap","_context","prev","next","moment","subtract","replace","axios","get","format","sent","data","t0","console","log","t1","error","stop","_x","apply","this","RepositorySearch","debouncedSearchOnChange","debounce","languageString","_this","props","searchAction","searchOnChange","event","clearAction","currentTarget","value","_this$props","react","AppBar","position","color","className","Toolbar","Container","maxWidth","Typography","variant","component","gutterBottom","TextField","label","defaultValue","onChange","LinearProgress","React","connect","store","_ref2","_callee2","_context2","_x2","RepositoryCard","Card","CardContent","href","html_url","full_name","description","Grid","container","direction","justify","alignItems","item","created_at","Star_default","stargazers_count","RepositoryList","List","map","repository","ListItem","key","id","disableGutters","RepositoryCard_RepositoryCard","App","react_default","createElement","Fragment","CssBaseline","RepositoryHeading","containers_RepositoryList","Boolean","window","location","hostname","match","createStore","applyMiddleware","thunk","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.57b20a2d.chunk.js","sourcesContent":["import { IRepository } from '../interfaces';\nimport moment from 'moment';\n\n/**\n * Irepository get all action\n */\nexport interface IRepositoryGetAllAction {\n    createdSince: moment.Moment;\n    type: RepositoryActionTypes.GET_ALL;\n    searchString: string;\n    repositories: IRepository[];\n}\n\n/**\n * Irepository clear all action\n */\nexport interface IRepositoryClearAllAction {\n    type: RepositoryActionTypes.CLEAR_ALL;\n}\n\n/**\n * Repository action types\n */\nexport enum RepositoryActionTypes {\n    GET_ALL = 'GET_ALL',\n    CLEAR_ALL = 'CLEAR_ALL',\n}\n\nexport type RepositoryActions = IRepositoryGetAllAction | IRepositoryClearAllAction;","import { Reducer } from 'redux';\nimport {\n  RepositoryActions,\n  RepositoryActionTypes\n} from '../actions/actionTypes';\nimport {\n  IRepositoriesState\n} from '../interfaces';\n\nconst initialState: IRepositoriesState = {\n  items: [],\n  searching: false\n};\n/**\n * States repository reducer\n * @param [state] \n * @param action \n * @returns  \n */\nexport const repositoryReducer: Reducer<IRepositoriesState, RepositoryActions> = (\n  state = initialState,\n  action\n) => {\n  switch (action.type) {\n    case RepositoryActionTypes.GET_ALL: {\n      return {\n        ...state,\n        items: action.repositories,\n        searchString: action.searchString,\n        createdSince: action.createdSince,\n        searching: false\n      };\n    }\n    case RepositoryActionTypes.CLEAR_ALL: {\n      return {\n        ...state,\n        items: [],\n        searching: true\n      };\n    }\n    default:\n      return state;\n  }\n};","import {\n    applyMiddleware,\n    combineReducers,\n    createStore,\n    Store\n} from 'redux';\nimport thunk from 'redux-thunk';\nimport { repositoryReducer } from './domain/reducers/RepositoryReducer';\nimport { IRepositoriesState } from './domain/interfaces';\n\nexport interface IAppState {\n    repositoriesState: IRepositoriesState;\n}\n\nconst rootReducer = combineReducers<IAppState>({\n    repositoriesState: repositoryReducer,\n});\n\nexport default function configureStore(initialState?:IAppState): Store<IAppState, any> {  \n    const store = createStore(rootReducer, initialState, applyMiddleware(thunk));\n    return store;\n}","import { ActionCreator, Dispatch } from 'redux';\nimport { ThunkAction } from 'redux-thunk';\nimport axios from 'axios';\nimport {\n  IRepository,\n  IRepositoriesState \n} from '../interfaces';\nimport {\n  RepositoryActionTypes,\n  IRepositoryGetAllAction\n} from './actionTypes';\nimport moment from 'moment';\n\nconst getMostStarredGithubRepoUrl = (language:string, createdSince:string, numberOfResults:number):string => `https://api.github.com/search/repositories?q=language:${language}+created%3A>${createdSince}&type=Repositories&sort=stars&order=desc&per_page=${numberOfResults}`;\n\n/**\n * Get all repositories by language\n * @param language \n * @param [numberOfResults] \n * @returns  \n */\nexport const getAllRepositories: ActionCreator<\n  ThunkAction<Promise<any>, IRepositoriesState, null, IRepositoryGetAllAction>\n> = (language:string, numberOfResults:number = 3) => {\n  return async (dispatch: Dispatch) => {\n\n    let repositories:IRepository[] = [];\n    const createdSince = moment().subtract(1, 'months');      \n\n    try {\n      const cleanLanguage = language.replace(/[|&;$%@\"<>()+,]/g, \"\");\n      try {\n        const response = await axios.get(getMostStarredGithubRepoUrl(cleanLanguage, createdSince.format('YYYY-MM-DD'), numberOfResults));\n        if(response.data && response.data.items) {\n          repositories = response.data.items;\n        }\n      } catch (err) {\n        console.log(err);\n      }\n      dispatch({\n        searchString: cleanLanguage,\n        repositories,\n        createdSince,\n        type: RepositoryActionTypes.GET_ALL\n      });\n    } catch (err) {\n      console.error(err);\n    }\n  };\n};\n/**\n * Dispatches clear all repositories\n * @returns  \n */\nexport const clearAllRepositories: ActionCreator<\n  ThunkAction<Promise<any>, IRepositoriesState, null, IRepositoryGetAllAction>\n> = () => {\n  return async (dispatch: Dispatch) => {\n    dispatch({\n      type: RepositoryActionTypes.CLEAR_ALL\n    });\n  };\n};","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { IAppState } from '../Store';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Container from '@material-ui/core/Container';\nimport moment from 'moment';\nimport { IRepository } from '../domain/interfaces';\nimport { getAllRepositories, clearAllRepositories } from '../domain/actions/RepositoryActions';\nimport { ChangeEvent } from 'react';\nimport { debounce } from 'lodash';\nimport LinearProgress from '@material-ui/core/LinearProgress';\n\ninterface IProps {\n    searchString: string;\n    searchAction: (searchString: string) => void;\n    clearAction: () => void;\n    createdSince?: moment.Moment;\n    searching?: boolean;\n}\n\nclass RepositorySearch extends React.Component<IProps> {\n    \n    debouncedSearchOnChange = debounce(languageString => {\n        if (this.props.searchAction) {\n            this.props.searchAction(languageString);\n        }\n    }, 500);\n\n    searchOnChange = (event: ChangeEvent<HTMLInputElement>) => {\n        this.props.clearAction();\n        this.debouncedSearchOnChange((() => event.currentTarget.value)());\n    }\n\n    public render() {\n        const { searchString, createdSince, searching } = this.props;\n        return (\n            <AppBar position=\"static\" color=\"default\" className=\"c-repositoryHeading\">\n                <Toolbar>\n                    <Container maxWidth='md'>\n                        <header>\n                            <Typography variant=\"h4\" component=\"h1\" gutterBottom>Most Stars: '{searchString}'</Typography>\n                            <TextField label=\"Currently Displaying\" defaultValue={this.props.searchString} onChange={this.searchOnChange} className=\"c-repositoryHeading-searchText\" />\n                            {!searching && createdSince && (<Typography variant=\"caption\" component=\"p\" gutterBottom>Repositories created since {createdSince.format('Do MMMM YYYY')}</Typography>)}\n                        </header>\n                    </Container>\n                </Toolbar>\n                {searching && (<LinearProgress />)}\n            </AppBar>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IAppState) => {\n    let searchString = '';\n    let repositories: IRepository[] = [];\n    let createdSince;\n    if (store.repositoriesState) {\n        if (store.repositoriesState.searchString) {\n            searchString = store.repositoriesState.searchString;\n        }\n        if (store.repositoriesState.items) {\n            repositories = store.repositoriesState.items;\n        }\n        if (store.repositoriesState.createdSince) {\n            createdSince = store.repositoriesState.createdSince;\n        }\n    }\n    return {\n        searchString,\n        repositories,\n        createdSince,\n        searching: store.repositoriesState.searching\n    };\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        searchAction: (language: string) => dispatch(getAllRepositories(language)),\n        clearAction: () => dispatch(clearAllRepositories())\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RepositorySearch);","import * as React from 'react';\nimport moment from 'moment';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport StarIcon from '@material-ui/icons/Star';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { IRepository } from '../domain/interfaces';\n\nexport default class RepositoryCard extends React.Component<IRepository, any> {\n\n    public render() {\n        return (\n            <Card className=\"c-repositoryCard\">\n                <CardContent>\n                    <Typography variant=\"h6\" gutterBottom>\n                        <a href={this.props.html_url} className=\"c-repositoryCard-link\">{this.props.full_name}</a>\n                    </Typography>\n                    <Typography variant=\"body2\" component=\"p\" className=\"c-repositoryCard-description\">\n                        {this.props.description}\n                    </Typography>\n                    <Grid container direction=\"row\" justify=\"space-between\" alignItems=\"center\">\n                        <Grid item>\n                            <Typography variant=\"body2\" component=\"p\" gutterBottom>\n                                Created: {moment(this.props.created_at).format('Do MMMM YYYY')}\n                            </Typography>\n                        </Grid>\n                        <Grid item>\n                            <Typography variant=\"body2\" component=\"p\" gutterBottom className=\"c-repositoryCard-stars\">\n                                <StarIcon className=\"c-repositoryCard-stars-icon\"/>\n                                {this.props.stargazers_count}\n                            </Typography>\n                        </Grid>\n                    </Grid>\n                </CardContent>\n            </Card >\n        );\n    }\n\n}\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { IAppState } from '../Store';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport { IRepository } from '../domain/interfaces';\nimport RepositoryCard from '../components/RepositoryCard';\n\ninterface IProps {\n    repositories: IRepository[];\n}\n\nclass RepositoryList extends React.Component<IProps> {\n    public render() {\n        const { repositories } = this.props;\n        return (\n            <List>\n                {repositories &&\n                    repositories.map(repository => {\n                        return (\n                            <ListItem key={repository.id} disableGutters>\n                                <RepositoryCard {...repository} />\n                            </ListItem>\n                        );\n                    })}\n            </List>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IAppState) => {\n    let repositories:IRepository[] = [];\n    if(store.repositoriesState && store.repositoriesState.items) {\n        repositories = store.repositoriesState.items\n    }\n    return { repositories };\n};\n\nexport default connect(mapStateToProps)(RepositoryList);","import React from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Container from '@material-ui/core/Container';\nimport './styles/App.scss';\nimport RepositoryHeading from './containers/RepositoryHeading';\nimport RepositoryList from './containers/RepositoryList';\n\nconst App: React.FC<{}> = () => {\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <RepositoryHeading />\n      <Container maxWidth='md'>\n        <RepositoryList />\n      </Container>\n    </React.Fragment>\n  );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'react-app-polyfill/ie11';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { Store } from 'redux';\nimport configureStore, { IAppState } from './Store';\nimport { getAllRepositories } from './domain/actions/RepositoryActions';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\ninterface IProps {\n  store: Store<IAppState>;\n}\n\nconst Root: React.SFC<IProps> = props => {\n  return (\n    <Provider store={props.store}>\n      <App />\n    </Provider>\n  );\n};\n\nconst initialSearchString = 'Javascript';\nconst store = configureStore({ repositoriesState: { searchString:initialSearchString, searching: false }});\nstore.dispatch(getAllRepositories(initialSearchString, 3));\n\nReactDOM.render(<Root store={store} />, document.getElementById('root') as HTMLElement);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}